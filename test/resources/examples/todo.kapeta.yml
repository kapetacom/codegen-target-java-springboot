kind: kapeta/block-type-service:0.0.2
metadata:
  name: kapeta/todo
spec:
  target:
    kind: kapeta/language-target-java-spring-boot:local
    options:
      basePackage: org.mycompany.services.todo
      groupId: org.mycompany.services
      artifactId: todo
  entities:
    source:
      type: kapeta-dsl
      value: |-
        enum TaskType {
        	DEV,
        	DESIGN
        }

        Task {
        	id: string
        	listId: string
        	userId: string
        	title: string
        	description?: string
        	done?: boolean
        	type: TaskType
            count: integer
            metadata?: any
        	tags: Set<string>
        }


        User {
        	id: string
        	name?: string
        	email: string
        	tasks:Task[]
        }


        TaskList {
        	id: string
        	title: string
        	createdBy?: string
        	created?: long
        }

        UserAuth {
        	username: string
        	password: string
        }
  consumers:
    - kind: kapeta/resource-type-redis:0.0.2
      metadata:
        name: cache
    - kind: kapeta/resource-type-mongodb:0.0.2
      metadata:
        name: todo-db
    - kind: kapeta/resource-type-rest-client:0.0.2
      metadata:
        name: users
      spec:
        source:
          type: kaplang
          version: 0.0.1
          value: |-
              @DELETE('/users/{other}')
              deleteUser(@Path other:string, @Header('Kapeta-Overwrite') overwrite:string):void
            
              @GET('/users/{other}/test')
              getUser(@Path other:string, @Header metadata:Map<string, User>):User
            
              // Get all users
              @GET('/users')
              listUsers(@Query filter?:Set<string>):User[]

    - kind: kapeta/resource-type-auth-jwt-consumer:0.0.3
      metadata:
        name: authjwtconsumer
      spec:
        port:
          name: http
          type: http
  providers:
    - kind: kapeta/resource-type-rest-api:0.0.2
      metadata:
        name: tasks
      spec:

        source:
          type: kaplang
          version: 0.0.1
          value: |-
              // Add task to list
              @POST('/tasks/{listId}/new')
              addTask(@Path listId: string, @Body task: Task, @Header('Kapeta-Overwrite') overwrite?:string): void
            
              // Remove task from list
              @DELETE('/tasks/{listId}/{taskId}')
              removeTask(@Path listId: string, @Path taskId: string): void
              
              // Get tasks for list
              @GET('/tasks/{listId}')
              getTasks(@Path listId: string, @Query filter?:string): Task[]
              
              // Update task
              @PUT('/tasks/{listId}/{taskId}')
              updateTask(@Path listId: string, @Path taskId: string, @Body task: Task): Task
          
              // Find tasks
              @GET('/tasks')
              search(@Query title:string, @Query("desc") description?:string): Task[]

    - kind: kapeta/resource-type-rest-api:0.0.2
      metadata:
        name: lists
      spec:
        source:
          type: kaplang
          version: 0.0.1
          value: |-
            // Gets all task lists
            @GET('/lists')
            getLists(): TaskList[]
            
            // Create new list
            @POST('/lists/new')
            addList(@Body list: TaskList): void
            
            // Updates a list
            @PUT('/lists/{listId}')
            updateList(@Path listId: string, @Body list: TaskList): void
            
            // Deletes a list and all tasks in it
            @DELETE('/lists/{listId}')
            removeList(@Path listId: string): void
          
